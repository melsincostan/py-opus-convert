import ffmpeg           # pip3 install ffmpeg-python
import os               # used to find the path of the files
import sys              # used for the arguments
from PIL import Image   # pip3 install Pillow / apt install python3-pil / apt install python3-pillow
# from shutil import copy # used to copy the files that will not be converted to opus that are present

LOSSLESS     = ["wav", "flac", "ape"]   # formats that will be converted to opus. Obviously, only lossless stuff
IMAGES       = ["png", "jpg", "jpeg"]   # image formats
TARGET       = ".opus"                  # target extension
TARGETIMAGES = ".jpg"                   # target image format
BITRATE      = "160k"                   # target bitrate
FOLDER_DELIM = "/"                      # separator between folders
CHAR_BLACKLIST = "|\\?*<>\":+[]'" # technically would need a / there but i am on linux so there won't be any, so i don't need special handling around sanitizing the path

def extract(query):
    """extract informations from the filename + path string of a file, return an object with everything in there"""
    path          = FOLDER_DELIM.join(query.split(FOLDER_DELIM)[:-1])   # path without the filename. if your filenames have the folder delimiter this won't work (not that it needs to?)
    filenameFull  = query.split(FOLDER_DELIM)[-1]                       # filename with the extension
    filename      = '.'.join(filenameFull.split('.')[:-1])              # remove the extension. some files might have other '.' in them, so keep that in mind
    extension     = filenameFull.split('.')[-1]                         # only the extension, without the '.'
    return {"filenameFull":filenameFull, "filename":filename, "path":path, "extension":extension}

def find(query):
    """return all the files (not directories) in a folder, including what is in subfolders"""
    acc = []
    for root, dirs, files in os.walk(query, topdown=False):
        for name in files:
            acc += [os.path.join(root, name)]
    return acc

def makeOutputPath(outputPath, filePath, filename, fileext):
    """for a given file, give an output path. Eventually create missing folders so ffmpeg doesn't error out"""
    if filePath == "" or filePath == None:
        return None
    if outputPath[-1] == FOLDER_DELIM: # remove an eventual / at the end
        outputPath = outputPath[:-1]

    fullPath = outputPath + FOLDER_DELIM + filePath
    fullPath += FOLDER_DELIM            # add a '/' at the end of the path

    sn_path = ''.join(char for char in fullPath if char not in CHAR_BLACKLIST)
    sn_file = ''.join(char for char in filename if char not in CHAR_BLACKLIST)

    if not os.path.isfile(sn_path):    # if the path doesn't exist, create it!
        try:
            os.makedirs(sn_path)
        except FileExistsError:
            pass    # nothing really went wrong if the folder already exists, continue quietly
    ext = TARGETIMAGES if fileext in IMAGES else TARGET
    return sn_path + sn_file + ext # return the path and target filename

def treat(input, output):
    """for a given input folder and output folder, return an array of file objects as generated by extract(), with an output path attribute argument so everything can just be passed to ffmpeg"""
    files = find(input)
    acc = []
    for file in files:
        fileInfo = extract(file)
        out = makeOutputPath(output, fileInfo["path"], fileInfo["filename"], fileInfo["extension"])
        if not out == None:
            fileInfo["outPath"] = out
            acc += [fileInfo]
    return acc

def convert(fileDict):
    """convert all files of the desired formats to opus, copy the rest. Takes an array of file objects as made by extract, with the additional output path attribute in, nothing out"""
    for fileInfo in fileDict:
        inFile  = fileInfo["path"] + FOLDER_DELIM + fileInfo["filenameFull"]
        outFile = fileInfo["outPath"]
        if fileInfo["extension"] in LOSSLESS:
            try:
                if not os.path.isfile(outFile):
                    print("[Converting]\t" + inFile)
                    ffmpeg.input(inFile).output(outFile, audio_bitrate=BITRATE).global_args('-loglevel', 'error').run()
                else:
                    print("[Skipping]\t" + outFile)
            except:
                print("[Error][Converting]\t" + inFile)
        elif fileInfo["extension"] in IMAGES:
            try:
                print("[Resizing]\t" + " to " + outFile)
                # copy(inFile, FOLDER_DELIM.join(outFile.split(FOLDER_DELIM)[:-1]))
                image = Image.open(inFile)
                rgbImage = image.convert("RGB")
                rgbImage.thumbnail((1000, 1000))
                rgbImage.save(outFile)
            except:
                print("[Error][Resizing]\t" + inFile + " to " + outFile)
        else:
            print("[Ignoring]\t" + inFile)

def run(arguments):
    """arguments: array of arguments as given by sys.argv minus the program name that would be at position 0"""
    if len(arguments) < 2:
        print("Not enough arguments: need input and output dir!")
        return None
    input  = arguments[0]
    output = arguments[1]
    print("[INPUT]\t\t" + input)
    print("[OUTPUT]\t" + output)
    print("[TARGET]\t" + TARGET)
    print("[BITRATE]\t" + BITRATE)
    print("[FORMATS]\t" + ', '.join(LOSSLESS) + "\n")
    fileDict = treat(input, output)
    convert(fileDict)

if __name__ == "__main__":
    # execute only if run as a script
    run(sys.argv[1:])
